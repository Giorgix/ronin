//------------ COLOR LIBRARY--------------//

// Greys
$grey-secondstory--soft: #EDEADC
$grey-secondstory: #75738B
$grey-secondstory--loud: #1E1E1E

// Whites
$white-secondstory: #F6F5EE

// Oranges
$orange-secondstory: #D6A34B
$orange-secondstory--loud: #D48158

// Blues
$blue-aero: #7CB9E8
$blue-azure: #007FFF


//-------------COLOR PALLETES--------------//

// the first parameter of the list must be the category-name (primary, secondary, tertiary) and the second the variant-name (base, very-soft, soft, moderately-soft, moderately-loud, loud, very-loud) the third parameter must be the color-variable

// SECOND STORY
$pallete-second-story: primary base $grey-secondstory--soft, secondary base $grey-secondstory loud $grey-secondstory--loud soft $white-secondstory, tertiary base $orange-secondstory loud $orange-secondstory--loud


//---------------FUNCTIONS----------------//

@function hash-search($hash, $key, $control: 1)
  $i: $control
  $r: null
  @while $i < length($hash)
    @if nth($hash, $i) == $key
      $r: nth($hash, $i + 1)
      // stops the loop
      $i: length($hash)
    @else
      $i: $i + 2
  @return $r  

//--Pallete determined--//
//using a determined pallete list ($pallete-name), return the color variable for the $category-name and $variant-name

@function pallete-determined($pallete-name, $category-name: primary, $variant-name: base)
  @each $category in $pallete-name
    @if ($category-name == nth($category, 1))
      $color: hash-search($category, $variant-name, 2)
      @if $color != null 
        @return $color
      @else
        @warn 'variant #{$variant-name} not found'
        @return null
  @warn 'category #{$category-name} not found'
  @return null

//--Pallete auto--//
//using a list of variants as reference, generate a variation of the $color based on $variant-name and $ratio passed to the function  

//$color can be: 
//keyword    --> blue
//HEX code   --> #1e1e1e
//RGB value  --> rgb(200,0,0)
//RGBA value --> rgba(200,0,0, 0.5)
//HSL value  --> hsl(120deg, 100%, 50%)
//HSLA value --> hsla(120deg, 100%, 50%, 0.5)

$variants: soft very-soft 30% soft 20% moderately-soft 10%, loud moderately-loud 10% loud 20% very-loud 30%

@function pallete-auto($color, $variant-name, $ratio: 1.5)
  //$actual-lightness: lightness($color)
  @each $category in $variants
    $value: hash-search($category, $variant-name, 2)
    @if nth($category, 1) == soft
      @if $value != null
        @return tint($color, $value * $ratio)
    @if nth($category, 1) == loud 
      @if $value != null
        @return shade($color, $value * $ratio)
  @warn 'variant #{$variant-name} not found'
  @return null


//--------------------TESTS---------------------//

@mixin test-pallete-determined
  @if pallete-determined($pallete-second-story, secondary, loud) == #1E1E1E
    @debug 'TEST PASS'
  @else
    @debug 'TEST FAIL'

@mixin test-pallete-auto
  @if pallete-auto(blue, soft, 3) == #9999ff
    @debug 'TEST PASS'
  @else
    @debug 'TEST FAIL'

//+test-pallete-determined
//+test-pallete-auto
